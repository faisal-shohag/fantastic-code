generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Problem {
  id          Int         @id @default(autoincrement())
  title String
  unique_title       String      @unique
  description String
  difficulty  DifficultyLevel
  tags        TagsOnProblems[]
  companies   CompaniesOnProblems[]
  editorials  Editorial[]
  solutions   Solution[]
  submissions Submission[]
  hints       Hint[]
  defaultCode Json
  TestCases   TestCase[]
  author User @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId String
  likes       Like[]
  comments    Comment[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Tag {
  id       Int              @id @default(autoincrement())
  name     String           @unique
  problems TagsOnProblems[]
}

model TagsOnProblems {
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId Int
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     Int

  @@id([problemId, tagId])
  @@index([tagId])
}

model Company {
  id       Int                   @id @default(autoincrement())
  name     String                @unique
  problems CompaniesOnProblems[]
}

model CompaniesOnProblems {
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId Int
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int

  @@id([problemId, companyId])
  @@index([companyId])
}

model Editorial {
  id        Int     @id @default(autoincrement())
  content   String
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId Int
}

model Solution {
  id        Int     @id @default(autoincrement())
  code      String
  language  String
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId Int
}

model Submission {
  id        Int             @id @default(autoincrement())
  status    SubmissionStatus
  date      DateTime        @default(now())
  language  String
  runtime   Float?
  memory    Float?
  problem   Problem         @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId Int
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

enum SubmissionStatus {
  PENDING
  ACCEPTED
  WRONG_ANSWER
  RUNTIME_ERROR
  COMPILATION_ERROR
}

model User {
  id          String @id @default(cuid())
  username    String?        @unique
  email String @unique
  emailVerified DateTime?
  name String
  bio String?
  image String?
  institution String?
  website   String?
  github String?
  linkedin String?
  x String?
  gender String?
  location String?
  birthday String?
  skills Skills[]
  works Works[]
  educations Educations[]
  submissions Submission[]
  likes       Like[]
  comments    Comment[]
  commentLikes CommentLike[]
  replyLikes   ReplyLike[]
  accounts Account[]
  sessions Session[]
  created_problems Problem[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Skills {
  id          Int           @id @default(autoincrement())
  name String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Works {
  id          Int           @id @default(autoincrement())
  company String
  title String
  isPresent Boolean @default(false)
  startDate DateTime?
  endDate DateTime?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Educations {
  id          Int           @id @default(autoincrement())
  school String
  degree String
  isPresent Boolean @default(false)
  startDate DateTime?
  endDate DateTime?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}


model Like {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId Int

  @@unique([userId, problemId])
}

model Comment {
  id        Int           @id @default(autoincrement())
  content   String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  problem   Problem      @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId Int
  createdAt DateTime     @default(now())
  replies   Reply[]      
  likes     CommentLike[]
}

model Reply {
  id        Int          @id @default(autoincrement())
  content   String
  comment   Comment      @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  createdAt DateTime     @default(now())
  likes     ReplyLike[]
}

model CommentLike {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int

  @@unique([userId, commentId])
}

model ReplyLike {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  reply     Reply   @relation(fields: [replyId], references: [id], onDelete: Cascade)
  replyId   Int

  @@unique([userId, replyId])
}

model Hint {
  id        Int     @id @default(autoincrement())
  content   String
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId Int
}

model TestCase {
  id        Int         @id @default(autoincrement())
  input     String
  output    String
  problem   Problem     @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId Int
  type      TestCaseType
}

enum TestCaseType {
  RUN
  SUBMIT
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}