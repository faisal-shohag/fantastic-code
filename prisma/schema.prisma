generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Problem {
  id           Int                   @id @default(autoincrement())
  title        String
  unique_title String                @unique
  description  String
  difficulty   DifficultyLevel
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  func         String?
  serial       Int
  userId       String
  defaultCode  Json
  timelimit    Int                   @default(100)
  memorylimit  Int                   @default(50)
  comments     Comment[]
  companies    CompaniesOnProblems[]
  editorials   Editorial[]
  hints        Hint[]
  likes        Like[]
  author       User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  solutions    Solution[]
  submissions  Submissions[]
  tags         TagsOnProblems[]
  TestCases    TestCase[]
  isPublish    Boolean @default(false)
  bn_description String?
}

model Tag {
  id       Int              @id @default(autoincrement())
  name     String           @unique
  problems TagsOnProblems[]
}

model TagsOnProblems {
  problemId Int
  tagId     Int
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([problemId, tagId])
  @@index([tagId])
}

model Company {
  id       Int                   @id @default(autoincrement())
  name     String                @unique
  problems CompaniesOnProblems[]
}

model CompaniesOnProblems {
  problemId Int
  companyId Int
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@id([problemId, companyId])
  @@index([companyId])
}

model Editorial {
  id        Int     @id @default(autoincrement())
  content   String
  problemId Int
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model Solution {
  id        Int     @id @default(autoincrement())
  code      String
  language  String
  problemId Int
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model Submissions {
  id        Int              @id @default(autoincrement())
  status    String
  date      DateTime         @default(now())
  percentage Float?
  language  String
  runtime   Float?
  memory    Float?
  problemId Int
  userId    String
  code      String
  tc        Json
  problem   Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String        @id @default(cuid())
  username         String?       @unique
  email            String        @unique
  emailVerified    DateTime?
  name             String
  bio              String?
  image            String?
  institution      String?
  website          String?
  github           String?
  linkedin         String?
  x                String?
  gender           String?
  location         String?
  birthday         String?
  comments         Comment[]
  commentLikes     CommentLike[]
  educations       Educations[]
  likes            Like[]
  created_problems Problem[]
  replyLikes       ReplyLike[]
  skills           Skills[]
  submissions      Submissions[]
  works            Works[]
  accounts         Account[]
  sessions         Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Skills {
  id     Int    @id @default(autoincrement())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Works {
  id        Int       @id @default(autoincrement())
  company   String
  title     String
  isPresent Boolean   @default(false)
  startDate DateTime?
  endDate   DateTime?
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Educations {
  id        Int       @id @default(autoincrement())
  school    String
  degree    String
  isPresent Boolean   @default(false)
  startDate DateTime?
  endDate   DateTime?
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id        Int     @id @default(autoincrement())
  userId    String
  problemId Int
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Comment {
  id        Int           @id @default(autoincrement())
  content   String
  userId    String
  problemId Int
  createdAt DateTime      @default(now())
  problem   Problem       @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     CommentLike[]
  replies   Reply[]
}

model Reply {
  id        Int         @id @default(autoincrement())
  content   String
  commentId Int
  createdAt DateTime    @default(now())
  comment   Comment     @relation(fields: [commentId], references: [id], onDelete: Cascade)
  likes     ReplyLike[]
}

model CommentLike {
  id        Int     @id @default(autoincrement())
  userId    String
  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model ReplyLike {
  id      Int    @id @default(autoincrement())
  userId  String
  replyId Int
  reply   Reply  @relation(fields: [replyId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, replyId])
}

model Hint {
  id        Int     @id @default(autoincrement())
  content   String
  problemId Int
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model TestCase {
  id        Int          @id @default(autoincrement())
  input     String
  output    String
  problemId Int
  type      TestCaseType
  problem   Problem      @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

enum TestCaseType {
  RUN
  SUBMIT
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}
